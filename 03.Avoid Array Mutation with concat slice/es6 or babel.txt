//Redux never use immute method/function
//immute = put, splice
const addCounter = (list) =>{
//   list.push(0);
//   return list;
  
 // return list.concat([0]);
  
  return [...list, 0]
  
}

const removeCounter = (list, index) =>{
//   list.splice(index, 1);
//   return list;
  
//   return list
//     .slice(0, index) //.slice(start,before end)
//     .concat(list.slice(index+1))
  
  return [
    ...list.slice(0,index),
    ...list.slice(index+1)
  ]
}

const incrimentCounter = (list, index) => {
//   list[index]++;
//   return list; //mutation
  
//   return list
//      .slice(0, index) 
//      .concat([list[index]+1])
//      .concat(list.slice(index+1));
  
  return [
     ...list.slice(0, index), 
     list[index]+1,
     ...list.slice(index+1)
  ];
}

const testAndCounter = () => {
  const listBefore = [];
  const listAfter = [0];
  
   deepFreeze(listBefore);
  
  expect(addCounter(listBefore)).toEqual(listAfter);
};


const testRemoveCounter = () => {
  const listBefore = [0,10,20];
  const listAfter = [0,20];
  
   deepFreeze(listBefore);
  
  expect(removeCounter(listBefore, 1)).toEqual(listAfter);
};

const testIncrimentCounter = () => {
  const listBefore = [0,10,20];
  const listAfter = [0,11,20];
  
   deepFreeze(listBefore);
  
  expect(incrimentCounter(listBefore, 1)).toEqual(listAfter);
};

testIncrimentCounter();
testRemoveCounter();
testAndCounter();

console.log('All Test Pass')

















